<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.mapper-seeker">

<select id="getOffList" resultType="com.lx.odw.vo.ProjectVO">
	select 
		project_number,
		project_name,
		project_start_date,
		project_end_date,
		ST_X(project_location) as project_lng,
		ST_Y(project_location) as project_lat,
		project_comment,
		project_subject,
		project_enroll_date,
		work_start_time,
		work_end_time
	from
		project
		
</select>

<select id="requestOffJobListByProjectNumber" parameterType="com.lx.odw.vo.ProjectVO" resultType="com.lx.odw.vo.JobVO">
	select
		project_number,
		job_pay,
		job_start_date,
		job_end_date,
		job_requirement,
		job_limit_count
	from
		job
	where
		project_number = #{projectNumber}
		
</select>

<!-- 웹 일감 목록 쿼리문 -->
<!-- parameterType DAO에서 넣어준 value에 타입을 맞춰서 써주면 된다 String-->
<select id="projectList" parameterType="String" resultType="com.lx.odw.vo.ProjectVO">
	select
		*
	from
		project
	where
		offer_id = #{offerId}	

</select>

<!--@Transactional-->
<insert id="insertProject" parameterType="com.lx.odw.vo.ProjectVO">
	insert into
		project (
			project_name,
			project_subject,
			project_start_date,
			project_end_date,
			work_start_time,
			work_end_time,
			const_certificate,
			project_comment,
			request_picture,
			morning,
			launch,
			evening,
			commute,
			off_work,
			project_location,
			offer_id)
		values (
			#{projectName},
			#{projectSubject},
			#{projectStartDate},
			#{projectEndDate},
			#{workStartTime},
			#{workEndTime},
			#{constCertificate},
			#{projectComment},
			#{requestPicture},
			#{morning},
			#{launch},
			#{evening},
			#{commute},
			#{offWork},
			ST_GeomFromText('POINT(${projectLng} ${projectLat})'),
			#{offerId})
</insert>
<insert id="insertJobs" parameterType="java.util.List">
	insert into
		job (
			project_number,
			job_name,
			job_pay,
			job_start_date,
			job_end_date,
			job_requirement,
			job_limit_count)
		values
		<foreach collection="list" item="item" separator=" , ">
			(
			LAST_INSERT_ID(),
			 #{item.jobName},
			 #{item.jobPay},
			 #{item.jobStartDate},
			 #{item.jobEndDate},
			 #{item.jobRequirement},
			 #{item.jobLimitCount})
		</foreach>
</insert>
<update id="subOfferCash" parameterType="com.lx.odw.vo.OfferVO">
	update
		offer
	set
		offer_cash = offer_cash - #{offerCash}
	where
		offer_id = #{offerId}
</update>
<!--//end @Transactional-->
<select id="projectDetailInfo" parameterType="com.lx.odw.vo.ProjectVO" resultType="com.lx.odw.vo.ProjectVO">
	select
		*
	from
		project
	where
		offer_id = #{offerId}
</select>

<select id="showPrjDetail" parameterType="com.lx.odw.vo.ProjectVO" resultType="com.lx.odw.vo.ProjectVO">
	select
		project_number,
		project_name,
		project_start_date,
		project_end_date,
		ST_X(project_location) as project_lng,
		ST_Y(project_location) as project_lat,
		project_comment,
		project_subject,
		project_enroll_date,
		work_start_time,
		work_end_time,
		request_picture,
		const_certificate,
		morning,launch,evening,commute,off_work
	from
		project
	where
		project_number = #{projectNumber}
</select>

<select id="requestOfferProjectList" parameterType="String" resultType="com.lx.odw.vo.OfferWorkVO">
select DISTINCT
	project_number
from
	project
where
	offer_id = #{offerId} and
	project_start_date <![CDATA[ <= ]]> curdate() and
	project_end_date <![CDATA[ >= ]]> curdate()
</select>
<select id="getProjectCommuteInfo" parameterType="String" resultType="com.lx.odw.vo.OfferWorkVO">
select DISTINCT
	t.total, r.recruit, a.absent, p.project_number, p.work_start_time, p.work_end_time, p.offer_id, p.project_name, j.job_limit_count
from
	project p, job j,
	(select
		sum(j.job_limit_count) as total, p.project_number
	 from
		project p, job j
	 where
		p.project_number = #{projectNumber} and
		p.project_number = j.project_number
		) t,
	(select DISTINCT
		count(*) as recruit , p.project_number
	 from
		project p, job j, job_candidate c
	 where
		p.project_number = #{projectNumber} and
		p.project_number = j.project_number and
		j.job_number = c.job_number and
		c.target_date = curdate() and
		c.candidate_status BETWEEN 1 and 6) r,
	(select DISTINCT
		count(*) as absent, p.project_number
	 from 
		project p , job j, job_candidate c
	 where
	 	 p.project_number = #{projectNumber} and
	 	 p.project_number = j.project_number and
		 j.job_number = c.job_number and
		 c.target_date = curdate() and
         c.candidate_status = 1 or
         c.candidate_status = 5) a
where
	p.project_number = #{projectNumber} and
	p.project_number = j.project_number and
	p.project_start_date  <![CDATA[ <= ]]> curdate() and
	p.project_end_date <![CDATA[ >= ]]> curdate();
</select>
</mapper>